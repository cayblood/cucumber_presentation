// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.FeatureTests.ScopedSteps
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scoping step definitions")]
    public partial class ScopingStepDefinitionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ScopedSteps.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scoping step definitions", @"As a developer
I would like to be able to scope the step definitions (bindings) on method and class level
So that I can implement test logic differently depending on the usage context

Attribute usage:

[StepContext(Tag = ""mytag"", Feature = ""feature title"", Scenario = ""scenario title"")]

Future ideas:
* scope for previous steps ([StepContext(Step = ""my previous step for doing something"")])
* use regex in scopes ([StepContext(Scenario = ""(my )?scenario title"")])", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to tags")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ScopingStepDefinitionsToTags()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to tags", new string[] {
                        "mytag"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("I have a step definition that is scoped to tag \'mytag\'");
#line 20
 testRunner.And("I have a step definition that is scoped to tag \'othertag\'");
#line 21
 testRunner.When("I execute a scenario with a tag \'mytag\'");
#line 22
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to tag \'mytag\'" +
                    "\' should be executed");
#line 23
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to tag \'othert" +
                    "ag\'\' should not be executed");
#line 24
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to features")]
        public virtual void ScopingStepDefinitionsToFeatures()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to features", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have a step definition that is scoped to feature \'Scoping step definitions\'");
#line 30
 testRunner.And("I have a step definition that is scoped to feature \'Other feature\'");
#line 31
 testRunner.When("I execute a scenario in feature \'Scoping step definitions\'");
#line 32
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to feature \'Sc" +
                    "oping step definitions\'\' should be executed");
#line 33
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to feature \'Ot" +
                    "her feature\'\' should not be executed");
#line 34
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions to scenarios")]
        public virtual void ScopingStepDefinitionsToScenarios()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions to scenarios", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have a step definition that is scoped to scenario \'Scoping step definitions to " +
                    "scenarios\'");
#line 40
 testRunner.And("I have a step definition that is scoped to scenario \'Other scenario\'");
#line 41
 testRunner.When("I execute a scenario in scenario \'Scoping step definitions to scenarios\'");
#line 42
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to scenario \'S" +
                    "coping step definitions to scenarios\'\' should be executed");
#line 43
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to scenario \'O" +
                    "ther scenario\'\' should not be executed");
#line 44
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scopes can be conbined with AND")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ScopesCanBeConbinedWithAND()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scopes can be conbined with AND", new string[] {
                        "mytag"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I have a step definition that is scoped to both tag \'mytag\' and feature \'Scoping " +
                    "step definitions\'");
#line 52
 testRunner.When("I execute a scenario with a tag \'mytag\' in feature \'Scoping step definitions\'");
#line 53
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to both tag \'m" +
                    "ytag\' and feature \'Scoping step definitions\'\' should be executed");
#line 54
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scopes can be conbined with OR")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ScopesCanBeConbinedWithOR()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scopes can be conbined with OR", new string[] {
                        "mytag"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have a step definition that has two scope declaration: tag \'mytag\' and feature " +
                    "\'Other feature\'");
#line 61
 testRunner.When("I execute a scenario with a tag \'mytag\' in feature \'Scoping step definitions\'");
#line 62
 testRunner.Then("the step definition \'Given I have a step definition that has two scope declaratio" +
                    "n: tag \'mytag\' and feature \'Other feature\'\' should be executed");
#line 63
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoped matches have higher precedency")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ScopedMatchesHaveHigherPrecedency()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoped matches have higher precedency", new string[] {
                        "mytag"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I have a step definition that is scoped to tag \'mytag\'");
#line 71
 testRunner.And("I have a step definition without scope");
#line 72
 testRunner.When("I execute a scenario with a tag \'mytag\'");
#line 73
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to tag \'mytag\'" +
                    "\' should be executed");
#line 74
 testRunner.Then("the step definition \'I have a step definition without scope\' should not be execut" +
                    "ed");
#line 75
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Scoping step definitions of a binding class")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ScopingStepDefinitionsOfABindingClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scoping step definitions of a binding class", new string[] {
                        "mytag"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("I have a step definition that is in a class scoped to tag \'mytag\'");
#line 82
 testRunner.When("I execute a scenario with a tag \'mytag\'");
#line 83
 testRunner.Then("the step definition \'Given I have a step definition that is in a class scoped to " +
                    "tag \'mytag\'\' should be executed");
#line 84
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No ambiguouity if the same method matches with multiple scopes")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void NoAmbiguouityIfTheSameMethodMatchesWithMultipleScopes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No ambiguouity if the same method matches with multiple scopes", new string[] {
                        "mytag"});
#line 87
this.ScenarioSetup(scenarioInfo);
#line 88
 testRunner.Given("I have a step definition that has two scope declaration: tag \'mytag\' and feature " +
                    "\'Scoping step definitions\'");
#line 89
 testRunner.When("I execute a scenario with a tag \'mytag\' in feature \'Scoping step definitions\'");
#line 90
 testRunner.Then("the step definition \'Given I have a step definition that has two scope declaratio" +
                    "n: tag \'mytag\' and feature \'Scoping step definitions\'\' should be executed");
#line 91
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("More scope matches have higher precedency")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void MoreScopeMatchesHaveHigherPrecedency()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("More scope matches have higher precedency", new string[] {
                        "mytag"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("I have a step definition that is scoped to tag \'mytag\' and to scenario \'More scop" +
                    "e matches have higher precedency\'");
#line 98
 testRunner.And("I have a step definition that is scoped to tag \'mytag\'");
#line 99
 testRunner.When("I execute a scenario with a tag \'mytag\' in feature \'Scoping step definitions\'");
#line 100
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to tag \'mytag\'" +
                    " and to scenario \'More scope matches have higher precedency\'\' should be executed" +
                    "");
#line 101
 testRunner.Then("the step definition \'Given I have a step definition that is scoped to tag \'mytag\'" +
                    "\' should not be executed");
#line 102
 testRunner.And("the scenario should be executed successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
