// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace NinjaSurvivalRate.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Skill availability")]
    public partial class SkillAvailabilityFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "danger_levels.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Skill availability", "As a ninja trainer,\nI want ninjas to understand the dangers of various opponents\n" +
                    "so that they can engage them in combat more effectively", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Samurai are dangeous with katanas, no advanced kicks")]
        public virtual void SamuraiAreDangeousWithKatanasNoAdvancedKicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Samurai are dangeous with katanas, no advanced kicks", ((string[])(null)));
#line 6
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "skills"});
            table1.AddRow(new string[] {
                        "katana"});
            table1.AddRow(new string[] {
                        "karate-kick"});
            table1.AddRow(new string[] {
                        "roundhouse-kick"});
#line 7
 testRunner.Given("the following skills are allowed", ((string)(null)), table1);
#line 12
 testRunner.When("a ninja faces a samurai");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "technique",
                        "danger"});
            table2.AddRow(new string[] {
                        "katana",
                        "high"});
            table2.AddRow(new string[] {
                        "karate-kick",
                        "low"});
#line 13
 testRunner.Then("he should expect the following attack techniques", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Chuch Norris can do anything and is always dangerous")]
        public virtual void ChuchNorrisCanDoAnythingAndIsAlwaysDangerous()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Chuch Norris can do anything and is always dangerous", ((string[])(null)));
#line 18
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "skills"});
            table3.AddRow(new string[] {
                        "katana"});
            table3.AddRow(new string[] {
                        "karate-kick"});
            table3.AddRow(new string[] {
                        "roundhouse-kick"});
#line 19
 testRunner.Given("the following skills are allowed", ((string)(null)), table3);
#line 24
 testRunner.When("a ninja faces Chuck Norris");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "technique",
                        "danger"});
            table4.AddRow(new string[] {
                        "katana",
                        "extreme"});
            table4.AddRow(new string[] {
                        "karate-kick",
                        "extreme"});
            table4.AddRow(new string[] {
                        "roundhouse-kick",
                        "extreme"});
#line 25
 testRunner.Then("he should expect the following attack techniques", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
