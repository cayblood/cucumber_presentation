<!DOCTYPE chapter SYSTEM "../resources/plainbook/plainbook.dtd" >
<chapter title="The Three Layers of UI Automation" id="chp_three_layers">
		<p>
			Many ninja children are told the story of Cucumber and the three layers of UI Automation, in which the the
			abstract concept of layers of responsibility are represented by bears who are too weak to eat hot porridge
			and the little ninja comes in and eats the porridge and totally flips out, absolutely killing everyone in
			the story and
			other nearby stories. Ahh the carnage is truly a sight to behold...
		</p>
		<p>Sorry, ignore that last bit.</p>
		<p>
			Ninjas learn how to use many deadly weapons during their years of training &mdash; Nunchucks, Sai and many others. None are more treacherous than the ones for UI test automation. Some of these tools use the dark magic of
			the Geisha to
			seduce young ninjas into believing that they can build up a suite of tests by recording actions performed on
			a web site to produce automation scripts. Geishas promise that these scripts solve the problem of ongoing UI automation.
		</p>
		<p>
			At first, all seems to go well. Young ninjas record scripts quickly and the tests all pass. Ninjas can easily add more tests. 
			After a few months, new features bring some small styling changes to a number
			of core pages of Ninja web sites. Suddenly all the tests start failing! The ninjas are starting to realise that they
			have been tricked by the Geisha magic.
			Their anger turns to despair, however, once they look at the scripts produced in the first stage of their
			journey. The scripts are written in Selenese (<link ref="img.selenese" />), a strange language from a far off land. Selenese uses twelve words where a real ninja would usually use one. 
		</p>
<p>
The ninjas realize that their UI record and replay testing was a trap. They
were describing tests at the technical level of user interface interactions. The
resulting tests are very brittle and many of them break with even the smallest
change in the UI. Since the scripting language is quite verbose, it is hard to
understand the reasons why a test fails.
The ninjas realise that the test scripts are completely unmaintainable and must be thrown away. 
Chuck Norris, of course, refactors Selenese using roundhouse kicks but ninjas do not have that level of skill. 
Ninjas
			then fall under the Mount Fuji death spell (also known as the sine of death<footnote>
				<url link="http://gojko.net/2010/07/29/the-sine-of-death-by-ui-test-automation/"></url>
			</footnote>),
			illustrated in
			<link ref="img.mount.fuji"/>.
		</p>
		<img src="selenese.png" title="The Secret language of Selenese" id="img.selenese"/>
		<p>

		</p>
		<p>
			Some ninjas start to describe tests with user interface workflows, not low-level technical actions. This becomes a bit more stable. They reuse actions in workflows, making test scripts shorter, easier to understand and maintain. These tests
		 	are not	bound to a particular layout, but they are bound to the implementation of a user interface, still not really aligned with the underlying business model. When the page workflow changes, or when the underlying technology changes, the tests still break although the business functionality stays the same.
		</p>
		<p>
			This is when ninjas reach zen illumination:  business rules
			don't change as much as technical implementations. Technology moves much faster than business. The closer
			tests are to business rules, the more stable they are. Ninjas realise that a test script describes two things: the specification of a business rule and the way to validate it. The specification does not depend on the user interface, just the validation process.
		</p>
		<img src="the_sine_of_death.png" title="The Mount Fuji of Death" id="img.mount.fuji"/>
		<p>
			Ninjas then start to divide the two: the specification of a business rule can be written in a language readable even to junior ninjas who don't know the secrets of ancient calligraphy. These specifications are stable and do not change very often. They capture the validation process and automate it with different levels of granularity, applying what they learned about reusable workflows. Ninjas start thinking about the three levels of UI test automation, shown in <link ref="img.three_levels" />). 
		</p>
		<p>
			<ol>
				<li>
					Business rule or functionality level: what is this test demonstrating or exercising. Ideally illustrated with realistic key examples. For example:
					Free
					delivery is offered to customers who order two or more books, illustrated with an example of a customer who orders one book and doesn't get free delivery and an example of a customer who orders two books and gets free delivery.
				</li>
				<li>
					User interface workflow level: what does a user have to do to exercise the functionality through the
					UI, on a higher activity level. For example, put the specified number of books in a shopping cart, enter address
					details,
					verify that delivery options include or not include free delivery as expected.
				</li>
				<li>
					Technical activity level: what are the technical steps required to exercise the functionality. For
					example, open the shop homepage, log in with <code>testuser</code> and <code>testpassword</code> go to the <code>/book</code> page,
					click on the first image with the <code>book</code> CSS class, wait for page to load, click on the &lsquo;Buy now&rsquo;
					link and so on.
				</li>
			</ol>
		</p>
		<img src="three_levels.png" title="The three levels of web automation" id="img.three_levels"/>
		<p>
			And there was much rejoicing. The idea of thinking about these different levels 
			allows ninjas to write UI-level tests that were easy to understand, efficient to write and relatively
			inexpensive to maintain. This is because there is a natural hierarchy of concepts on these three levels.
			Checking that delivery is available for two books involves putting a book in a shopping cart. Putting a book
			in a shopping cart involves a sequence of technical steps. Entering address details does as well. Breaking
			things down like that and combining lower level concepts into higher level concepts reduces the cognitive
			load and promotes reuse.
		</p>
		<important title="The principle of symmetric change" id="imp.symmetric.changes">
			<p>
				The best software is the one where the technical software model is aligned with the relevant business domain model. This ensures that one small change in the business domain (new requirements or changes to existing features) results in one small change in software. The same is true for the other artefacts produced for software &mdash; tests and documentation. When the tests are aligned with the business domain model, one small change in business will result in one small change in tests, making the tests easy to maintain.</p>
		<p>Tests described at a low level technical detail, in the language of technical UI interactions, are everything but aligned with a business model. If anything, they are aligned with the current design and layout of user interfaces. A small change in business requirements can have a huge impact on such tests, requiring hours of updates to tests after just a few minutes of changes to the code.
			</p>
		</important>
	<section id="sec_three_layers_easy" title="Easy to understand">
		<p>
			From the bottom up, the clarity of the test increases. At the technical activity level, tests are very
			opaque and full of clutter &mdash; it's hard to see the ninja in the forest.<footnote>Unless you are Chuck Norris</footnote>
			At the user interface workflow level, tests describe how something is done, which is easier to understand
			but still has too much detail to efficiently describe several possibilities. At the business rule level,
			the intention of the test is described in a relatively terse form. We can use that level to effectively
			communicate all different possibilities in key examples. It is much more efficient to give
			another example as &lsquo;Free delivery is not offered to customers who have one book&rsquo; than to talk about
			logging in, putting only a single book in a cart, checking out etc. Because health and safety regulations we had to take out the text specifying that other example in the language of clicking check boxes and links, because readers noses would bleed after reading it as if they were punched in the face by Chuck Norris himself. 
		</p>
	</section>
	<section id="sec_three_layers_efficient" title="Efficient to write">
		<p>
			From the bottom up, the technical level of tests decreases. At the technical activity level, you need people
			who understand the design of a system, HTTP calls, DOM and such to write the test. To write tests at the
			user interface workflow level, you only need to understand the web site workflow. At the business rule level,
			you need to understand what the business rule is. Given a set of third-level components (eg login, adding a book),
			testers who are not automation specialists and business users can happily write the definition of second level
			steps. This allows them to engage more efficiently during development and reduce the automation load on developers.
		</p>
		<p>
			More importantly, the business rule and the workflow level can be written before the UI is actually there.
			Tests at these levels can be written before the development starts, and be used as guidelines for development
			and as acceptance criteria to verify the output.
		</p>
	</section>
	<section id="sec_three_layers_inexpensive" title="Relatively inexpensive to maintain">
		<p>
			The business rule level is not tied to any particular web site design or activity flow, so it remains stable
			and unchanged during most web user interface changes, be it layout or workflow improvements. The user interface
			workflow level is tied to the activity workflow, so when the flow for a particular action changes we need to
			rewrite only that action. The technical level is tied to the layout of the pages, so when the layout changes
			we need to rewrite or re-record only the implementation of particular second-level steps affected by that
			(without changing the description of the test at the business or the workflow level).
			To continue with the free delivery example from above, if the login form was suddenly changed not to have a
			button but an image, a ninja would only need to re-write the <code>login</code> action at the technical level. 
		</p>
	</section>
	<section id="sec_three_layers_benefits" title="The benefits of three levels">
		<p>
			You don't need to be Chuck Norris to know that the changes happen most frequently the technical level &mdash; layout, 
			not the activity workflow and definitely not the business rule level. So by
			breaking up the implementation into this hierarchy, ninjas can create several layers of insulation and limit
			the propagation of changes. This reduces the cost of maintenance significantly. 
		</p>
		<p>
					At the same time, introducing the business level is a good start of aligning the test specifications with the underlying business domain model, which then allows ninjas to benefit from the principle of symmetric change. It also enables them to use tests as a living documentation system.  
		</p>
	</section>

</chapter>
